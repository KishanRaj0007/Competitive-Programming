
1. SUBSTRING CHECK
To check for substring s in sting x, we use x.find(s). It searches for the first occurrence of the substring s within the string x. It returns the starting index (position) of the first occurrence of s
in x. If the substring s is not found, find returns a special constant value std::string::npos.

       if(x.find(s) == string::npos){
           cout << "Substring not found"<<endl;
       }
       else{
           cout << "s found in x at staring index "<< x.find(s) <<endl;
       }

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2. DELETE CHARACTER(S) STARTING AT INDEX
    str.erase(start_index, frequency);

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3.  Suppose there is a string 10111010. Let l points to first index, and r points to last index. On iterating l towards right and r towards left simultaneously, at any point the value of
    r-l+1 will give the length of substring starting from l till r.

   EXAMPLE:- https://codeforces.com/problemset/problem/1791/C
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. Kishan's Dublet SubString Paradox
Theorem:
The frequency of the substring "ab" is equal to the frequency of the substring "ba" in a string composed solely of characters 'a' and 'b' if and only if the first and last characters 
of the string are the same. 
If the frequencies are not equal, this equality can be achieved by reversing either the first or the last character of the string.

  https://codeforces.com/problemset/problem/1606/A
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
